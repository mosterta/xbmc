diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/allcodecs.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/allcodecs.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/allcodecs.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/allcodecs.c	2016-08-03 22:20:11.318163341 +0200
***************
*** 116,121 ****
--- 116,122 ----
      REGISTER_HWACCEL(WMV3_DXVA2,        wmv3_dxva2);
      REGISTER_HWACCEL(WMV3_VAAPI,        wmv3_vaapi);
      REGISTER_HWACCEL(WMV3_VDPAU,        wmv3_vdpau);
+     REGISTER_HWACCEL(MSMPEG4V3_VDPAU,   msmpeg4v3_vdpau);
  
      /* video codecs */
      REGISTER_ENCODER(A64MULTI,          a64multi);
***************
*** 253,260 ****
--- 254,263 ----
      REGISTER_DECODER(MSA1,              msa1);
      REGISTER_DECODER(MSMPEG4_CRYSTALHD, msmpeg4_crystalhd);
      REGISTER_DECODER(MSMPEG4V1,         msmpeg4v1);
+     REGISTER_DECODER(MSMPEG4V1_VDPAU,   msmpeg4v1_vdpau);
      REGISTER_ENCDEC (MSMPEG4V2,         msmpeg4v2);
      REGISTER_ENCDEC (MSMPEG4V3,         msmpeg4v3);
+     REGISTER_DECODER(MSMPEG4V3_VDPAU,   msmpeg4v3_vdpau);
      REGISTER_DECODER(MSRLE,             msrle);
      REGISTER_DECODER(MSS1,              mss1);
      REGISTER_DECODER(MSS2,              mss2);
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/arm/aac.h ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/arm/aac.h
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/arm/aac.h	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/arm/aac.h	2016-08-03 22:20:11.798148956 +0200
***************
*** 93,99 ****
               : "d0", "d1", "d2");
      return dst;
  }
! 
  #define VMUL4S VMUL4S
  static inline float *VMUL4S(float *dst, const float *v, unsigned idx,
                              unsigned sign, const float *scale)
--- 93,99 ----
               : "d0", "d1", "d2");
      return dst;
  }
! /*
  #define VMUL4S VMUL4S
  static inline float *VMUL4S(float *dst, const float *v, unsigned idx,
                              unsigned sign, const float *scale)
***************
*** 137,143 ****
               : "cc", "d0", "d1", "d2", "d3", "d4", "d5");
      return dst;
  }
! 
  #endif /* HAVE_NEON_INLINE */
  
  #endif /* AVCODEC_ARM_AAC_H */
--- 137,143 ----
               : "cc", "d0", "d1", "d2", "d3", "d4", "d5");
      return dst;
  }
! */
  #endif /* HAVE_NEON_INLINE */
  
  #endif /* AVCODEC_ARM_AAC_H */
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/avcodec.h ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/avcodec.h
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/avcodec.h	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/avcodec.h	2016-08-03 22:20:11.938144760 +0200
***************
*** 209,214 ****
--- 209,215 ----
      AV_CODEC_ID_MSMPEG4V1,
      AV_CODEC_ID_MSMPEG4V2,
      AV_CODEC_ID_MSMPEG4V3,
+     AV_CODEC_ID_MSMPEG4V4,
      AV_CODEC_ID_WMV1,
      AV_CODEC_ID_WMV2,
      AV_CODEC_ID_H263P,
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/h263dec.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/h263dec.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/h263dec.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/h263dec.c	2016-08-03 22:20:12.448129476 +0200
***************
*** 161,167 ****
  {
      int pos = (get_bits_count(&s->gb) + 7) >> 3;
  
!     if (s->divx_packed || s->avctx->hwaccel) {
          /* We would have to scan through the whole buf to handle the weird
           * reordering ... */
          return buf_size;
--- 161,171 ----
  {
      int pos = (get_bits_count(&s->gb) + 7) >> 3;
  
!     if(s->divx_packed || (s->avctx->hwaccel &&
!          !(s->codec_id == AV_CODEC_ID_MSMPEG4V1 || 
!            s->codec_id == AV_CODEC_ID_MSMPEG4V2 ||
!            s->codec_id == AV_CODEC_ID_MSMPEG4V3 ||
!            s->codec_id == AV_CODEC_ID_MSMPEG4V4))) {
          /* We would have to scan through the whole buf to handle the weird
           * reordering ... */
          return buf_size;
***************
*** 604,610 ****
          ff_thread_finish_setup(avctx);
  
  #if FF_API_CAP_VDPAU
!     if (CONFIG_MPEG4_VDPAU_DECODER && (s->avctx->codec->capabilities & AV_CODEC_CAP_HWACCEL_VDPAU)) {
          ff_vdpau_mpeg4_decode_picture(avctx->priv_data, s->gb.buffer, s->gb.buffer_end - s->gb.buffer);
          goto frame_end;
      }
--- 608,615 ----
          ff_thread_finish_setup(avctx);
  
  #if FF_API_CAP_VDPAU
!     if ((CONFIG_MPEG4_VDPAU_DECODER || CONFIG_MSMPEG4V3_VDPAU_DECODER) && 
!           (s->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU)) {
          ff_vdpau_mpeg4_decode_picture(avctx->priv_data, s->gb.buffer, s->gb.buffer_end - s->gb.buffer);
          goto frame_end;
      }
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/h264.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/h264.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/h264.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/h264.c	2016-08-03 22:33:24.264388478 +0200
***************
*** 1438,1443 ****
--- 1438,1444 ----
      .close          = h264_decode_end,
      .decode         = h264_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_HWACCEL_VDPAU,
+     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
      .flush          = flush_dpb,
      .pix_fmts       = (const enum AVPixelFormat[]) { AV_PIX_FMT_VDPAU_H264,
                                                       AV_PIX_FMT_NONE},
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/Makefile ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/Makefile
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/Makefile	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/Makefile	2016-08-03 22:22:10.604588300 +0200
***************
*** 781,786 ****
--- 781,787 ----
  OBJS-$(CONFIG_MPEG2_XVMC_HWACCEL)         += mpegvideo_xvmc.o
  OBJS-$(CONFIG_MPEG4_VAAPI_HWACCEL)        += vaapi_mpeg4.o
  OBJS-$(CONFIG_MPEG4_VDPAU_HWACCEL)        += vdpau_mpeg4.o
+ OBJS-$(CONFIG_MSMPEG4V3_VDPAU_HWACCEL)    += vdpau_msmpeg4.o
  OBJS-$(CONFIG_MPEG4_VIDEOTOOLBOX_HWACCEL) += videotoolbox.o
  OBJS-$(CONFIG_VC1_D3D11VA_HWACCEL)        += dxva2_vc1.o
  OBJS-$(CONFIG_VC1_DXVA2_HWACCEL)          += dxva2_vc1.o
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/mpeg12dec.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/mpeg12dec.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/mpeg12dec.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/mpeg12dec.c	2016-08-03 22:34:22.212649796 +0200
***************
*** 1135,1141 ****
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG1_VDPAU_DECODER && FF_API_VDPAU
!     AV_PIX_FMT_VDPAU_MPEG1,
  #endif
  #if CONFIG_MPEG1_VDPAU_HWACCEL
      AV_PIX_FMT_VDPAU,
--- 1135,1141 ----
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG1_VDPAU_DECODER && FF_API_VDPAU
! //    AV_PIX_FMT_VDPAU_MPEG1,
  #endif
  #if CONFIG_MPEG1_VDPAU_HWACCEL
      AV_PIX_FMT_VDPAU,
***************
*** 1149,1155 ****
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG_VDPAU_DECODER && FF_API_VDPAU
!     AV_PIX_FMT_VDPAU_MPEG2,
  #endif
  #if CONFIG_MPEG2_VDPAU_HWACCEL
      AV_PIX_FMT_VDPAU,
--- 1149,1155 ----
      AV_PIX_FMT_XVMC,
  #endif
  #if CONFIG_MPEG_VDPAU_DECODER && FF_API_VDPAU
! //    AV_PIX_FMT_VDPAU_MPEG2,
  #endif
  #if CONFIG_MPEG2_VDPAU_HWACCEL
      AV_PIX_FMT_VDPAU,
***************
*** 2930,2935 ****
--- 2930,2936 ----
      .decode         = mpeg_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED |
                        AV_CODEC_CAP_HWACCEL_VDPAU | AV_CODEC_CAP_DELAY,
+     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
      .flush          = flush,
  };
  #endif
***************
*** 2946,2951 ****
--- 2947,2953 ----
      .decode         = mpeg_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED |
                        AV_CODEC_CAP_HWACCEL_VDPAU | AV_CODEC_CAP_DELAY,
+     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
      .flush          = flush,
  };
  #endif
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/mpeg4videodec.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/mpeg4videodec.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/mpeg4videodec.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/mpeg4videodec.c	2016-08-03 23:43:48.048344673 +0200
***************
*** 35,40 ****
--- 35,41 ----
  #include "profiles.h"
  #include "thread.h"
  #include "xvididct.h"
+ #include "vdpau.h"
  
  /* The defines below define the number of bits that are read at once for
   * reading vlc values. Changing these may improve speed and data cache needs
***************
*** 2769,2774 ****
--- 2773,2790 ----
      LIBAVUTIL_VERSION_INT,
  };
  
+ const enum AVPixelFormat ff_mpeg4_hwaccel_pixfmt_list_420[] = {
+ #if CONFIG_VAAPI
+    AV_PIX_FMT_VAAPI_VLD,
+ #endif
+ #if CONFIG_VDPAU
+ //   AV_PIX_FMT_VDPAU_MPEG4,
+    AV_PIX_FMT_VDPAU,
+ #endif
+    AV_PIX_FMT_YUV420P,
+    AV_PIX_FMT_NONE
+ };
+ 
  AVCodec ff_mpeg4_decoder = {
      .name                  = "mpeg4",
      .long_name             = NULL_IF_CONFIG_SMALL("MPEG-4 part 2"),
***************
*** 2778,2789 ****
      .init                  = decode_init,
      .close                 = ff_h263_decode_end,
      .decode                = ff_h263_decode_frame,
!     .capabilities          = AV_CODEC_CAP_DRAW_HORIZ_BAND | AV_CODEC_CAP_DR1 |
                               AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY |
                               AV_CODEC_CAP_FRAME_THREADS,
      .flush                 = ff_mpeg_flush,
      .max_lowres            = 3,
!     .pix_fmts              = ff_h263_hwaccel_pixfmt_list_420,
      .profiles              = NULL_IF_CONFIG_SMALL(ff_mpeg4_video_profiles),
      .update_thread_context = ONLY_IF_THREADS_ENABLED(mpeg4_update_thread_context),
      .priv_class = &mpeg4_class,
--- 2794,2805 ----
      .init                  = decode_init,
      .close                 = ff_h263_decode_end,
      .decode                = ff_h263_decode_frame,
!     .capabilities          = /* AV_CODEC_CAP_DRAW_HORIZ_BAND | */ AV_CODEC_CAP_DR1 |
                               AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY |
                               AV_CODEC_CAP_FRAME_THREADS,
      .flush                 = ff_mpeg_flush,
      .max_lowres            = 3,
!     .pix_fmts              = ff_mpeg4_hwaccel_pixfmt_list_420,
      .profiles              = NULL_IF_CONFIG_SMALL(ff_mpeg4_video_profiles),
      .update_thread_context = ONLY_IF_THREADS_ENABLED(mpeg4_update_thread_context),
      .priv_class = &mpeg4_class,
***************
*** 2807,2816 ****
      .init           = decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY |
!                       AV_CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]) { AV_PIX_FMT_VDPAU_MPEG4,
!                                                   AV_PIX_FMT_NONE },
      .priv_class     = &mpeg4_vdpau_class,
  };
  #endif
--- 2823,2835 ----
      .init           = decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .flush          = ff_mpeg_flush,
!     .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_TRUNCATED | CODEC_CAP_DELAY |
!                       CODEC_CAP_HWACCEL_VDPAU,
!     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
!     .pix_fmts       = (const enum AVPixelFormat[]) { AV_PIX_FMT_VDPAU,
!                                                    AV_PIX_FMT_NONE },
!     .profiles       = NULL_IF_CONFIG_SMALL(ff_mpeg4_video_profiles),
      .priv_class     = &mpeg4_vdpau_class,
  };
  #endif
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/msmpeg4dec.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/msmpeg4dec.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/msmpeg4dec.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/msmpeg4dec.c	2016-08-03 23:50:47.786089777 +0200
***************
*** 914,919 ****
--- 914,931 ----
      return 0;
  }
  
+ const enum AVPixelFormat ff_msmpeg_hwaccel_pixfmt_list_420[] = {
+ #if CONFIG_VAAPI
+     AV_PIX_FMT_VAAPI_VLD,
+ #endif
+ #if CONFIG_VDPAU
+ //    AV_PIX_FMT_VDPAU_MSMPEG4V3,
+     AV_PIX_FMT_VDPAU,
+ #endif
+     AV_PIX_FMT_YUV420P,
+     AV_PIX_FMT_NONE
+ };
+ 
  AVCodec ff_msmpeg4v1_decoder = {
      .name           = "msmpeg4v1",
      .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 1"),
***************
*** 923,934 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DRAW_HORIZ_BAND | AV_CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
  
  AVCodec ff_msmpeg4v2_decoder = {
--- 935,943 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY,
      .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
  };
  
  AVCodec ff_msmpeg4v2_decoder = {
***************
*** 940,951 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DRAW_HORIZ_BAND | AV_CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
  
  AVCodec ff_msmpeg4v3_decoder = {
--- 949,957 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY,
      .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
  };
  
  AVCodec ff_msmpeg4v3_decoder = {
***************
*** 957,968 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DRAW_HORIZ_BAND | AV_CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
  
  AVCodec ff_wmv1_decoder = {
--- 963,971 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY,
      .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
  };
  
  AVCodec ff_wmv1_decoder = {
***************
*** 974,983 ****
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DRAW_HORIZ_BAND | AV_CODEC_CAP_DR1,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]) {
!         AV_PIX_FMT_YUV420P,
!         AV_PIX_FMT_NONE
!     },
  };
--- 977,1048 ----
      .init           = ff_msmpeg4_decode_init,
      .close          = ff_h263_decode_end,
      .decode         = ff_h263_decode_frame,
!     .capabilities   = /* CODEC_CAP_DRAW_HORIZ_BAND | */ AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_DELAY,
!     .max_lowres     = 3,
!     .pix_fmts       = ff_msmpeg_hwaccel_pixfmt_list_420,
! };
! 
! #define CONFIG_MSMPEGV3_VDPAU_DECODER 1
! #if CONFIG_MSMPEGV3_VDPAU_DECODER
! static const AVOption msmpeg_options[] = {
!     {"quarter_sample", "1/4 subpel MC", offsetof(MpegEncContext, quarter_sample), AV_OPT_TYPE_INT, {.i64 = 0}, 0, 1, 0},
!     {"divx_packed", "divx style packed b frames", offsetof(MpegEncContext, divx_packed), AV_OPT_TYPE_INT, {.i64 = 0}, 0, 1, 0},
!     {NULL}
! };
! 
! static const AVClass msmpegv1_vdpau_class = {
!     "MSMPEG4 Video VDPAU Decoder",
!     av_default_item_name,
!     msmpeg_options,
!     LIBAVUTIL_VERSION_INT,
! };
!  
! AVCodec ff_msmpeg4v3_vdpau_decoder = {
!     .name           = "msmpeg4_vdpau",
!     .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 3 (VDPAU)"),
!     .type           = AVMEDIA_TYPE_VIDEO,
!     .id             = AV_CODEC_ID_MSMPEG4V3,
!     .priv_data_size = sizeof(Mpeg4DecContext),
!     .init           = ff_msmpeg4_decode_init,
!     .close          = ff_h263_decode_end,
!     .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_HWACCEL_VDPAU,
!     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
!     .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
!     .priv_class     = &msmpegv1_vdpau_class,
! };
! 
! AVCodec ff_msmpeg4v2_vdpau_decoder = {
!     .name           = "msmpeg4v2_vdpau",
!     .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 2 (VDPAU)"),
!     .type           = AVMEDIA_TYPE_VIDEO,
!     .id             = AV_CODEC_ID_MSMPEG4V2,
!     .priv_data_size = sizeof(Mpeg4DecContext),
!     .init           = ff_msmpeg4_decode_init,
!     .close          = ff_h263_decode_end,
!     .decode         = ff_h263_decode_frame,
!     .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_HWACCEL_VDPAU,
!     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
      .max_lowres     = 3,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
!     .priv_class     = &msmpegv1_vdpau_class,
  };
+ 
+ AVCodec ff_msmpeg4v1_vdpau_decoder = {
+     .name           = "msmpeg4v1_vdpau",
+     .long_name      = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 1 (VDPAU)"),
+     .type           = AVMEDIA_TYPE_VIDEO,
+     .id             = AV_CODEC_ID_MSMPEG4V1,
+     .priv_data_size = sizeof(Mpeg4DecContext),
+     .init           = ff_msmpeg4_decode_init,
+     .close          = ff_h263_decode_end,
+     .decode         = ff_h263_decode_frame,
+     .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_TRUNCATED | AV_CODEC_CAP_HWACCEL_VDPAU,
+     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
+     .max_lowres     = 3,
+     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
+     .priv_class     = &msmpegv1_vdpau_class,
+ };
+ 
+ #endif
Binary files FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/.utils.c.rej.swp and ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/.utils.c.rej.swp differ
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vc1dec.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vc1dec.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vc1dec.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vc1dec.c	2016-08-03 22:38:25.495350647 +0200
***************
*** 1167,1173 ****
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU_WMV3, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(ff_vc1_profiles)
  };
  #endif
--- 1167,1174 ----
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_HWACCEL_VDPAU,
!     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(ff_vc1_profiles)
  };
  #endif
***************
*** 1183,1189 ****
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_HWACCEL_VDPAU,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU_VC1, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(ff_vc1_profiles)
  };
  #endif
--- 1184,1191 ----
      .close          = ff_vc1_decode_end,
      .decode         = vc1_decode_frame,
      .capabilities   = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_HWACCEL_VDPAU,
!     .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS,
!     .pix_fmts       = (const enum AVPixelFormat[]){ AV_PIX_FMT_VDPAU, AV_PIX_FMT_NONE },
      .profiles       = NULL_IF_CONFIG_SMALL(ff_vc1_profiles)
  };
  #endif
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau.c	2016-08-03 22:20:18.187957449 +0200
***************
*** 682,690 ****
--- 682,692 ----
  
      switch (s->pict_type) {
      case AV_PICTURE_TYPE_B:
+     case AV_PICTURE_TYPE_S:
          next = (struct vdpau_render_state *)s->next_picture.f->data[0];
          assert(next);
          render->info.mpeg4.backward_reference     = next->surface;
+         if( s->pict_type != AV_PICTURE_TYPE_S)
          render->info.mpeg4.vop_coding_type        = 2;
          // no break here, going to set forward prediction
      case AV_PICTURE_TYPE_P:
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_internal.h ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_internal.h
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_internal.h	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_internal.h	2016-08-03 22:20:19.597915193 +0200
***************
*** 123,128 ****
--- 123,130 ----
  int ff_vdpau_common_end_frame(AVCodecContext *avctx, AVFrame *frame,
                                struct vdpau_picture_context *pic);
  int ff_vdpau_mpeg_end_frame(AVCodecContext *avctx);
+ int ff_vdpau_msmpeg_end_frame(AVCodecContext *avctx);
+ 
  int ff_vdpau_add_buffer(struct vdpau_picture_context *pic, const uint8_t *buf,
                          uint32_t buf_size);
  
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_mpeg4.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_mpeg4.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_mpeg4.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_mpeg4.c	2016-08-03 22:40:40.691294606 +0200
***************
*** 46,54 ****
--- 106,116 ----
  
      switch (s->pict_type) {
      case AV_PICTURE_TYPE_B:
+     case AV_PICTURE_TYPE_S:
          ref = ff_vdpau_get_surface_id(s->next_picture.f);
          assert(ref != VDP_INVALID_HANDLE);
          info->backward_reference = ref;
+         if( s->pict_type != AV_PICTURE_TYPE_S)
          info->vop_coding_type    = 2;
          /* fall-through */
      case AV_PICTURE_TYPE_P:
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_msmpeg4.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_msmpeg4.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_msmpeg4.c	1970-01-01 01:00:00.000000000 +0100
--- ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_msmpeg4.c	2016-08-04 15:48:52.539348238 +0200
***************
*** 0 ****
--- 1,114 ----
+ /*
+  * MPEG-4 Part 2 / H.263 decode acceleration through VDPAU
+  *
+  * Copyright (c) 2008 NVIDIA
+  * Copyright (c) 2013 Rémi Denis-Courmont
+  *
+  * This file is part of FFmpeg.
+  *
+  * FFmpeg is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+  * version 2.1 of the License, or (at your option) any later version.
+  *
+  * FFmpeg is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public
+  * License along with FFmpeg; if not, write to the Free Software Foundation,
+  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+  */
+ 
+ #include <vdpau/vdpau.h>
+ 
+ #include "avcodec.h"
+ #include "mpeg4video.h"
+ #include "vdpau.h"
+ #include "vdpau_internal.h"
+ 
+ static int vdpau_msmpeg4_start_frame(AVCodecContext *avctx,
+                                    const uint8_t *buffer, uint32_t size)
+ {
+    Mpeg4DecContext *ctx = avctx->priv_data;
+    MpegEncContext * const s = &ctx->m;
+    Picture *pic             = s->current_picture_ptr;
+    struct vdpau_picture_context *pic_ctx = pic->hwaccel_picture_private;
+    VdpPictureInfoMPEG4Part2 *info = &pic_ctx->info.mpeg4;
+    VdpVideoSurface ref;
+    int i;
+ 
+    /* fill VdpPictureInfoMPEG4Part2 struct */
+    info->forward_reference  = VDP_INVALID_HANDLE;
+    info->backward_reference = VDP_INVALID_HANDLE;
+    info->vop_coding_type    = 0;
+ 
+    switch (s->pict_type) {
+       case AV_PICTURE_TYPE_B:
+       case AV_PICTURE_TYPE_S:
+          ref = ff_vdpau_get_surface_id(s->next_picture.f);
+          assert(ref != VDP_INVALID_HANDLE);
+          info->backward_reference = ref;
+          if( s->pict_type != AV_PICTURE_TYPE_S)
+             info->vop_coding_type    = 2;
+          /* fall-through */
+       case AV_PICTURE_TYPE_P:
+          ref = ff_vdpau_get_surface_id(s->last_picture.f);
+          assert(ref != VDP_INVALID_HANDLE);
+          info->forward_reference  = ref;
+    }
+ 
+    info->trd[0]                            = s->pp_time;
+    info->trb[0]                            = s->pb_time;
+    info->trd[1]                            = s->pp_field_time >> 1;
+    info->trb[1]                            = s->pb_field_time >> 1;
+    info->vop_time_increment_resolution     = s->avctx->time_base.den;
+    info->vop_fcode_forward                 = s->f_code;
+    info->vop_fcode_backward                = s->b_code;
+    info->resync_marker_disable             = !ctx->resync_marker;
+    info->interlaced                        = !s->progressive_sequence;
+    info->quant_type                        = s->mpeg_quant;
+    info->quarter_sample                    = s->quarter_sample;
+    info->short_video_header                = avctx->codec->id == AV_CODEC_ID_H263;
+    info->rounding_control                  = s->no_rounding;
+    info->alternate_vertical_scan_flag      = s->alternate_scan;
+    info->top_field_first                   = s->top_field_first;
+    for (i = 0; i < 64; ++i) {
+       info->intra_quantizer_matrix[i]     = s->intra_matrix[i];
+       info->non_intra_quantizer_matrix[i] = s->inter_matrix[i];
+    }
+ 
+    ff_vdpau_common_start_frame(pic_ctx, buffer, size);
+    return ff_vdpau_add_buffer(pic_ctx, buffer, size);
+ }
+ 
+ static int vdpau_msmpeg4_decode_slice(av_unused AVCodecContext *avctx,
+                                     av_unused const uint8_t *buffer,
+                                     av_unused uint32_t size)
+ {
+      return 0;
+ }
+ static int vdpau_msmpeg4_init(AVCodecContext *avctx)
+ {
+   VdpDecoderProfile profile;
+ 
+   profile = VDP_DECODER_PROFILE_DIVX3_HOME_THEATER;
+ 
+   return ff_vdpau_common_init(avctx, profile, avctx->level);
+ }
+ 
+ AVHWAccel ff_msmpeg4v3_vdpau_hwaccel = {
+     .name           = "msmpeg4v3_vdpau",
+     .type           = AVMEDIA_TYPE_VIDEO,
+     .id             = AV_CODEC_ID_MSMPEG4V3,
+     .pix_fmt        = AV_PIX_FMT_VDPAU,
+     .start_frame    = vdpau_msmpeg4_start_frame,
+     .end_frame      = ff_vdpau_mpeg_end_frame,
+     .decode_slice   = vdpau_msmpeg4_decode_slice,
+     .frame_priv_data_size = sizeof(struct vdpau_picture_context),
+     .init           = vdpau_msmpeg4_init,
+     .uninit         = ff_vdpau_common_uninit,
+     .priv_data_size = sizeof(VDPAUContext),
+ };
+ 
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavformat/mov.c ffmpeg-3.1.1-Krypton-Alpha3/libavformat/mov.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavformat/mov.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavformat/mov.c	2016-08-03 22:53:37.717985495 +0200
***************
*** 3188,3193 ****
--- 3188,3194 ----
              return ret;
      }
  
+ #if 0
      switch (st->codecpar->codec_id) {
  #if CONFIG_H261_DECODER
      case AV_CODEC_ID_H261:
***************
*** 3202,3207 ****
--- 3203,3209 ----
          st->codecpar->height= 0;
          break;
      }
+ #endif
  
      // If the duration of the mp3 packets is not constant, then they could need a parser
      if (st->codecpar->codec_id == AV_CODEC_ID_MP3
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/arm/intmath.h ffmpeg-3.1.1-Krypton-Alpha3/libavutil/arm/intmath.h
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/arm/intmath.h	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavutil/arm/intmath.h	2016-08-03 22:20:24.377771939 +0200
***************
*** 61,67 ****
      __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
      return x;
  }
! 
  #define av_clip_intp2 av_clip_intp2_arm
  static av_always_inline av_const int av_clip_intp2_arm(int a, int p)
  {
--- 61,67 ----
      __asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));
      return x;
  }
! /*
  #define av_clip_intp2 av_clip_intp2_arm
  static av_always_inline av_const int av_clip_intp2_arm(int a, int p)
  {
***************
*** 69,75 ****
      __asm__ ("ssat %0, %2, %1" : "=r"(x) : "r"(a), "i"(p+1));
      return x;
  }
! 
  #define av_clip_uintp2 av_clip_uintp2_arm
  static av_always_inline av_const unsigned av_clip_uintp2_arm(int a, int p)
  {
--- 69,76 ----
      __asm__ ("ssat %0, %2, %1" : "=r"(x) : "r"(a), "i"(p+1));
      return x;
  }
! */
! /*
  #define av_clip_uintp2 av_clip_uintp2_arm
  static av_always_inline av_const unsigned av_clip_uintp2_arm(int a, int p)
  {
***************
*** 77,82 ****
--- 78,84 ----
      __asm__ ("usat %0, %2, %1" : "=r"(x) : "r"(a), "i"(p));
      return x;
  }
+ */
  
  #define av_sat_add32 av_sat_add32_arm
  static av_always_inline int av_sat_add32_arm(int a, int b)
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/pixdesc.c ffmpeg-3.1.1-Krypton-Alpha3/libavutil/pixdesc.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/pixdesc.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavutil/pixdesc.c	2016-08-03 22:20:24.527767443 +0200
***************
*** 963,968 ****
--- 963,992 ----
          .log2_chroma_h = 1,
          .flags = AV_PIX_FMT_FLAG_HWACCEL,
      },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V1] = {
+         .name = "vdpau_msmpegv1",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V2] = {
+         .name = "vdpau_msmpegv2",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V3] = {
+         .name = "vdpau_msmpegv3",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
+     [AV_PIX_FMT_VDPAU_MSMPEG4V4] = {
+         .name = "vdpau_msmpegv4",
+         .log2_chroma_w = 1,
+         .log2_chroma_h = 1,
+         .flags = AV_PIX_FMT_FLAG_HWACCEL,
+     },
  #endif
      [AV_PIX_FMT_RGB48BE] = {
          .name = "rgb48be",
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/pixfmt.h ffmpeg-3.1.1-Krypton-Alpha3/libavutil/pixfmt.h
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/pixfmt.h	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavutil/pixfmt.h	2016-08-03 22:20:24.617764745 +0200
***************
*** 106,111 ****
--- 106,115 ----
      AV_PIX_FMT_VDPAU_MPEG2,///< MPEG-2 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers
      AV_PIX_FMT_VDPAU_WMV3,///< WMV3 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers
      AV_PIX_FMT_VDPAU_VC1, ///< VC-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers
+     AV_PIX_FMT_VDPAU_MSMPEG4V1,
+     AV_PIX_FMT_VDPAU_MSMPEG4V2,
+     AV_PIX_FMT_VDPAU_MSMPEG4V3,
+     AV_PIX_FMT_VDPAU_MSMPEG4V4,
  #endif
      AV_PIX_FMT_RGB48BE,   ///< packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian
      AV_PIX_FMT_RGB48LE,   ///< packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/utils.c ffmpeg-3.1.1-Krypton-Alpha3/libavutil/utils.c
*** FFmpeg-3.1.1-Krypton-Alpha3.orig/libavutil/utils.c	2016-07-03 19:59:32.000000000 +0200
--- ffmpeg-3.1.1-Krypton-Alpha3/libavutil/utils.c	2016-08-03 22:20:24.777759950 +0200
***************
*** 42,48 ****
          return LIBAVUTIL_VERSION_INT;
  
  #if FF_API_VDPAU
!     av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake
  #endif
      av_assert0(AV_SAMPLE_FMT_DBLP == 9);
      av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);
--- 42,48 ----
          return LIBAVUTIL_VERSION_INT;
  
  #if FF_API_VDPAU
! //    av_assert0(AV_PIX_FMT_VDA_VLD == 81); //check if the pix fmt enum has not had anything inserted or removed by mistake
  #endif
      av_assert0(AV_SAMPLE_FMT_DBLP == 9);
      av_assert0(AVMEDIA_TYPE_ATTACHMENT == 4);
diff -c3 -r -N FFmpeg-3.1.1-Krypton-Alpha3.orig/libavcodec/vdpau_mpeg4.c ffmpeg-3.1.1-Krypton-Alpha3/libavcodec/vdpau_mpeg4.c
*** ffmpeg-3.1.6-Krypton.orig/libavcodec/vdpau_mpeg4.c	2017-05-05 15:03:35.929598046 +0200
--- ffmpeg-3.1.6-Krypton/libavcodec/vdpau_mpeg4.c	2017-05-04 23:31:10.729339757 +0200
***************
*** 140,145 ****
--- 140,147 ----
      }
  
      ff_vdpau_common_start_frame(pic_ctx, buffer, size);
+     if(avctx->extradata_size && s->picture_number==1)
+         ff_vdpau_add_buffer(pic_ctx, avctx->extradata, avctx->extradata_size);
      return ff_vdpau_add_buffer(pic_ctx, buffer, size);
  }
  
